Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    and
    if
    or

Grammar

Rule 0     S' -> Main
Rule 1     Main -> Instrucoes
Rule 2     Instrucoes -> Instrucoes Instrucao
Rule 3     Instrucoes -> Instrucao
Rule 4     Instrucao -> Atr
Rule 5     Instrucao -> ? ( Conds ) { Instrucoes }
Rule 6     Conds -> Cond
Rule 7     Cond -> Exp < Exp
Rule 8     Cond -> Exp > Exp
Rule 9     Cond -> Exp = = Exp
Rule 10    Cond -> Exp < = Exp
Rule 11    Cond -> Exp > = Exp
Rule 12    Cond -> Exp ! = Exp
Rule 13    Atr -> id = Exp
Rule 14    Atr -> $ string
Rule 15    Atr -> $ int
Rule 16    Atr -> $
Rule 17    Exp -> Exp + Term
Rule 18    Term -> Term - Factor
Rule 19    Exp -> Term
Rule 20    Term -> Term * Factor
Rule 21    Term -> Term / Factor
Rule 22    Term -> Factor
Rule 23    Factor -> id
Rule 24    Factor -> int
Rule 25    Factor -> float
Rule 26    Factor -> string

Terminals, with rules where they appear

!                    : 12
$                    : 14 15 16
(                    : 5
)                    : 5
*                    : 20
+                    : 17
-                    : 18
/                    : 21
<                    : 7 10
=                    : 9 9 10 11 12 13
>                    : 8 11
?                    : 5
and                  : 
error                : 
float                : 25
id                   : 13 23
if                   : 
int                  : 15 24
or                   : 
string               : 14 26
{                    : 5
}                    : 5

Nonterminals, with rules where they appear

Atr                  : 4
Cond                 : 6
Conds                : 5
Exp                  : 7 7 8 8 9 9 10 10 11 11 12 12 13 17
Factor               : 18 20 21 22
Instrucao            : 2 3
Instrucoes           : 1 2 5
Main                 : 0
Term                 : 17 18 19 20 21

Parsing method: LALR

state 0

    (0) S' -> . Main
    (1) Main -> . Instrucoes
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . ? ( Conds ) { Instrucoes }
    (13) Atr -> . id = Exp
    (14) Atr -> . $ string
    (15) Atr -> . $ int
    (16) Atr -> . $

    ?               shift and go to state 5
    id              shift and go to state 6
    $               shift and go to state 7

    Main                           shift and go to state 1
    Instrucoes                     shift and go to state 2
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 1

    (0) S' -> Main .



state 2

    (1) Main -> Instrucoes .
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . ? ( Conds ) { Instrucoes }
    (13) Atr -> . id = Exp
    (14) Atr -> . $ string
    (15) Atr -> . $ int
    (16) Atr -> . $

    $end            reduce using rule 1 (Main -> Instrucoes .)
    ?               shift and go to state 5
    id              shift and go to state 6
    $               shift and go to state 7

    Instrucao                      shift and go to state 8
    Atr                            shift and go to state 4

state 3

    (3) Instrucoes -> Instrucao .

    ?               reduce using rule 3 (Instrucoes -> Instrucao .)
    id              reduce using rule 3 (Instrucoes -> Instrucao .)
    $               reduce using rule 3 (Instrucoes -> Instrucao .)
    $end            reduce using rule 3 (Instrucoes -> Instrucao .)
    }               reduce using rule 3 (Instrucoes -> Instrucao .)


state 4

    (4) Instrucao -> Atr .

    ?               reduce using rule 4 (Instrucao -> Atr .)
    id              reduce using rule 4 (Instrucao -> Atr .)
    $               reduce using rule 4 (Instrucao -> Atr .)
    $end            reduce using rule 4 (Instrucao -> Atr .)
    }               reduce using rule 4 (Instrucao -> Atr .)


state 5

    (5) Instrucao -> ? . ( Conds ) { Instrucoes }

    (               shift and go to state 9


state 6

    (13) Atr -> id . = Exp

    =               shift and go to state 10


state 7

    (14) Atr -> $ . string
    (15) Atr -> $ . int
    (16) Atr -> $ .

    string          shift and go to state 11
    int             shift and go to state 12
    ?               reduce using rule 16 (Atr -> $ .)
    id              reduce using rule 16 (Atr -> $ .)
    $               reduce using rule 16 (Atr -> $ .)
    $end            reduce using rule 16 (Atr -> $ .)
    }               reduce using rule 16 (Atr -> $ .)


state 8

    (2) Instrucoes -> Instrucoes Instrucao .

    ?               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    id              reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $end            reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    }               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)


state 9

    (5) Instrucao -> ? ( . Conds ) { Instrucoes }
    (6) Conds -> . Cond
    (7) Cond -> . Exp < Exp
    (8) Cond -> . Exp > Exp
    (9) Cond -> . Exp = = Exp
    (10) Cond -> . Exp < = Exp
    (11) Cond -> . Exp > = Exp
    (12) Cond -> . Exp ! = Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Conds                          shift and go to state 13
    Cond                           shift and go to state 14
    Exp                            shift and go to state 15
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 10

    (13) Atr -> id = . Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 22
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 11

    (14) Atr -> $ string .

    ?               reduce using rule 14 (Atr -> $ string .)
    id              reduce using rule 14 (Atr -> $ string .)
    $               reduce using rule 14 (Atr -> $ string .)
    $end            reduce using rule 14 (Atr -> $ string .)
    }               reduce using rule 14 (Atr -> $ string .)


state 12

    (15) Atr -> $ int .

    ?               reduce using rule 15 (Atr -> $ int .)
    id              reduce using rule 15 (Atr -> $ int .)
    $               reduce using rule 15 (Atr -> $ int .)
    $end            reduce using rule 15 (Atr -> $ int .)
    }               reduce using rule 15 (Atr -> $ int .)


state 13

    (5) Instrucao -> ? ( Conds . ) { Instrucoes }

    )               shift and go to state 23


state 14

    (6) Conds -> Cond .

    )               reduce using rule 6 (Conds -> Cond .)


state 15

    (7) Cond -> Exp . < Exp
    (8) Cond -> Exp . > Exp
    (9) Cond -> Exp . = = Exp
    (10) Cond -> Exp . < = Exp
    (11) Cond -> Exp . > = Exp
    (12) Cond -> Exp . ! = Exp
    (17) Exp -> Exp . + Term

    <               shift and go to state 24
    >               shift and go to state 25
    =               shift and go to state 26
    !               shift and go to state 27
    +               shift and go to state 28


state 16

    (19) Exp -> Term .
    (18) Term -> Term . - Factor
    (20) Term -> Term . * Factor
    (21) Term -> Term . / Factor

    <               reduce using rule 19 (Exp -> Term .)
    >               reduce using rule 19 (Exp -> Term .)
    =               reduce using rule 19 (Exp -> Term .)
    !               reduce using rule 19 (Exp -> Term .)
    +               reduce using rule 19 (Exp -> Term .)
    ?               reduce using rule 19 (Exp -> Term .)
    id              reduce using rule 19 (Exp -> Term .)
    $               reduce using rule 19 (Exp -> Term .)
    $end            reduce using rule 19 (Exp -> Term .)
    }               reduce using rule 19 (Exp -> Term .)
    )               reduce using rule 19 (Exp -> Term .)
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31


state 17

    (22) Term -> Factor .

    -               reduce using rule 22 (Term -> Factor .)
    *               reduce using rule 22 (Term -> Factor .)
    /               reduce using rule 22 (Term -> Factor .)
    <               reduce using rule 22 (Term -> Factor .)
    >               reduce using rule 22 (Term -> Factor .)
    =               reduce using rule 22 (Term -> Factor .)
    !               reduce using rule 22 (Term -> Factor .)
    +               reduce using rule 22 (Term -> Factor .)
    ?               reduce using rule 22 (Term -> Factor .)
    id              reduce using rule 22 (Term -> Factor .)
    $               reduce using rule 22 (Term -> Factor .)
    $end            reduce using rule 22 (Term -> Factor .)
    }               reduce using rule 22 (Term -> Factor .)
    )               reduce using rule 22 (Term -> Factor .)


state 18

    (23) Factor -> id .

    -               reduce using rule 23 (Factor -> id .)
    *               reduce using rule 23 (Factor -> id .)
    /               reduce using rule 23 (Factor -> id .)
    <               reduce using rule 23 (Factor -> id .)
    >               reduce using rule 23 (Factor -> id .)
    =               reduce using rule 23 (Factor -> id .)
    !               reduce using rule 23 (Factor -> id .)
    +               reduce using rule 23 (Factor -> id .)
    ?               reduce using rule 23 (Factor -> id .)
    id              reduce using rule 23 (Factor -> id .)
    $               reduce using rule 23 (Factor -> id .)
    $end            reduce using rule 23 (Factor -> id .)
    }               reduce using rule 23 (Factor -> id .)
    )               reduce using rule 23 (Factor -> id .)


state 19

    (24) Factor -> int .

    -               reduce using rule 24 (Factor -> int .)
    *               reduce using rule 24 (Factor -> int .)
    /               reduce using rule 24 (Factor -> int .)
    <               reduce using rule 24 (Factor -> int .)
    >               reduce using rule 24 (Factor -> int .)
    =               reduce using rule 24 (Factor -> int .)
    !               reduce using rule 24 (Factor -> int .)
    +               reduce using rule 24 (Factor -> int .)
    ?               reduce using rule 24 (Factor -> int .)
    id              reduce using rule 24 (Factor -> int .)
    $               reduce using rule 24 (Factor -> int .)
    $end            reduce using rule 24 (Factor -> int .)
    }               reduce using rule 24 (Factor -> int .)
    )               reduce using rule 24 (Factor -> int .)


state 20

    (25) Factor -> float .

    -               reduce using rule 25 (Factor -> float .)
    *               reduce using rule 25 (Factor -> float .)
    /               reduce using rule 25 (Factor -> float .)
    <               reduce using rule 25 (Factor -> float .)
    >               reduce using rule 25 (Factor -> float .)
    =               reduce using rule 25 (Factor -> float .)
    !               reduce using rule 25 (Factor -> float .)
    +               reduce using rule 25 (Factor -> float .)
    ?               reduce using rule 25 (Factor -> float .)
    id              reduce using rule 25 (Factor -> float .)
    $               reduce using rule 25 (Factor -> float .)
    $end            reduce using rule 25 (Factor -> float .)
    }               reduce using rule 25 (Factor -> float .)
    )               reduce using rule 25 (Factor -> float .)


state 21

    (26) Factor -> string .

    -               reduce using rule 26 (Factor -> string .)
    *               reduce using rule 26 (Factor -> string .)
    /               reduce using rule 26 (Factor -> string .)
    <               reduce using rule 26 (Factor -> string .)
    >               reduce using rule 26 (Factor -> string .)
    =               reduce using rule 26 (Factor -> string .)
    !               reduce using rule 26 (Factor -> string .)
    +               reduce using rule 26 (Factor -> string .)
    ?               reduce using rule 26 (Factor -> string .)
    id              reduce using rule 26 (Factor -> string .)
    $               reduce using rule 26 (Factor -> string .)
    $end            reduce using rule 26 (Factor -> string .)
    }               reduce using rule 26 (Factor -> string .)
    )               reduce using rule 26 (Factor -> string .)


state 22

    (13) Atr -> id = Exp .
    (17) Exp -> Exp . + Term

    ?               reduce using rule 13 (Atr -> id = Exp .)
    id              reduce using rule 13 (Atr -> id = Exp .)
    $               reduce using rule 13 (Atr -> id = Exp .)
    $end            reduce using rule 13 (Atr -> id = Exp .)
    }               reduce using rule 13 (Atr -> id = Exp .)
    +               shift and go to state 28


state 23

    (5) Instrucao -> ? ( Conds ) . { Instrucoes }

    {               shift and go to state 32


state 24

    (7) Cond -> Exp < . Exp
    (10) Cond -> Exp < . = Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    =               shift and go to state 34
    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 33
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 25

    (8) Cond -> Exp > . Exp
    (11) Cond -> Exp > . = Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    =               shift and go to state 36
    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 35
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 26

    (9) Cond -> Exp = . = Exp

    =               shift and go to state 37


state 27

    (12) Cond -> Exp ! . = Exp

    =               shift and go to state 38


state 28

    (17) Exp -> Exp + . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Term                           shift and go to state 39
    Factor                         shift and go to state 17

state 29

    (18) Term -> Term - . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Factor                         shift and go to state 40

state 30

    (20) Term -> Term * . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Factor                         shift and go to state 41

state 31

    (21) Term -> Term / . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Factor                         shift and go to state 42

state 32

    (5) Instrucao -> ? ( Conds ) { . Instrucoes }
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . ? ( Conds ) { Instrucoes }
    (13) Atr -> . id = Exp
    (14) Atr -> . $ string
    (15) Atr -> . $ int
    (16) Atr -> . $

    ?               shift and go to state 5
    id              shift and go to state 6
    $               shift and go to state 7

    Instrucoes                     shift and go to state 43
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 33

    (7) Cond -> Exp < Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 7 (Cond -> Exp < Exp .)
    +               shift and go to state 28


state 34

    (10) Cond -> Exp < = . Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 44
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 35

    (8) Cond -> Exp > Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 8 (Cond -> Exp > Exp .)
    +               shift and go to state 28


state 36

    (11) Cond -> Exp > = . Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 45
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 37

    (9) Cond -> Exp = = . Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 46
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 38

    (12) Cond -> Exp ! = . Exp
    (17) Exp -> . Exp + Term
    (19) Exp -> . Term
    (18) Term -> . Term - Factor
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . id
    (24) Factor -> . int
    (25) Factor -> . float
    (26) Factor -> . string

    id              shift and go to state 18
    int             shift and go to state 19
    float           shift and go to state 20
    string          shift and go to state 21

    Exp                            shift and go to state 47
    Term                           shift and go to state 16
    Factor                         shift and go to state 17

state 39

    (17) Exp -> Exp + Term .
    (18) Term -> Term . - Factor
    (20) Term -> Term . * Factor
    (21) Term -> Term . / Factor

    <               reduce using rule 17 (Exp -> Exp + Term .)
    >               reduce using rule 17 (Exp -> Exp + Term .)
    =               reduce using rule 17 (Exp -> Exp + Term .)
    !               reduce using rule 17 (Exp -> Exp + Term .)
    +               reduce using rule 17 (Exp -> Exp + Term .)
    ?               reduce using rule 17 (Exp -> Exp + Term .)
    id              reduce using rule 17 (Exp -> Exp + Term .)
    $               reduce using rule 17 (Exp -> Exp + Term .)
    $end            reduce using rule 17 (Exp -> Exp + Term .)
    }               reduce using rule 17 (Exp -> Exp + Term .)
    )               reduce using rule 17 (Exp -> Exp + Term .)
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31


state 40

    (18) Term -> Term - Factor .

    -               reduce using rule 18 (Term -> Term - Factor .)
    *               reduce using rule 18 (Term -> Term - Factor .)
    /               reduce using rule 18 (Term -> Term - Factor .)
    <               reduce using rule 18 (Term -> Term - Factor .)
    >               reduce using rule 18 (Term -> Term - Factor .)
    =               reduce using rule 18 (Term -> Term - Factor .)
    !               reduce using rule 18 (Term -> Term - Factor .)
    +               reduce using rule 18 (Term -> Term - Factor .)
    ?               reduce using rule 18 (Term -> Term - Factor .)
    id              reduce using rule 18 (Term -> Term - Factor .)
    $               reduce using rule 18 (Term -> Term - Factor .)
    $end            reduce using rule 18 (Term -> Term - Factor .)
    }               reduce using rule 18 (Term -> Term - Factor .)
    )               reduce using rule 18 (Term -> Term - Factor .)


state 41

    (20) Term -> Term * Factor .

    -               reduce using rule 20 (Term -> Term * Factor .)
    *               reduce using rule 20 (Term -> Term * Factor .)
    /               reduce using rule 20 (Term -> Term * Factor .)
    <               reduce using rule 20 (Term -> Term * Factor .)
    >               reduce using rule 20 (Term -> Term * Factor .)
    =               reduce using rule 20 (Term -> Term * Factor .)
    !               reduce using rule 20 (Term -> Term * Factor .)
    +               reduce using rule 20 (Term -> Term * Factor .)
    ?               reduce using rule 20 (Term -> Term * Factor .)
    id              reduce using rule 20 (Term -> Term * Factor .)
    $               reduce using rule 20 (Term -> Term * Factor .)
    $end            reduce using rule 20 (Term -> Term * Factor .)
    }               reduce using rule 20 (Term -> Term * Factor .)
    )               reduce using rule 20 (Term -> Term * Factor .)


state 42

    (21) Term -> Term / Factor .

    -               reduce using rule 21 (Term -> Term / Factor .)
    *               reduce using rule 21 (Term -> Term / Factor .)
    /               reduce using rule 21 (Term -> Term / Factor .)
    <               reduce using rule 21 (Term -> Term / Factor .)
    >               reduce using rule 21 (Term -> Term / Factor .)
    =               reduce using rule 21 (Term -> Term / Factor .)
    !               reduce using rule 21 (Term -> Term / Factor .)
    +               reduce using rule 21 (Term -> Term / Factor .)
    ?               reduce using rule 21 (Term -> Term / Factor .)
    id              reduce using rule 21 (Term -> Term / Factor .)
    $               reduce using rule 21 (Term -> Term / Factor .)
    $end            reduce using rule 21 (Term -> Term / Factor .)
    }               reduce using rule 21 (Term -> Term / Factor .)
    )               reduce using rule 21 (Term -> Term / Factor .)


state 43

    (5) Instrucao -> ? ( Conds ) { Instrucoes . }
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . ? ( Conds ) { Instrucoes }
    (13) Atr -> . id = Exp
    (14) Atr -> . $ string
    (15) Atr -> . $ int
    (16) Atr -> . $

    }               shift and go to state 48
    ?               shift and go to state 5
    id              shift and go to state 6
    $               shift and go to state 7

    Instrucao                      shift and go to state 8
    Atr                            shift and go to state 4

state 44

    (10) Cond -> Exp < = Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 10 (Cond -> Exp < = Exp .)
    +               shift and go to state 28


state 45

    (11) Cond -> Exp > = Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 11 (Cond -> Exp > = Exp .)
    +               shift and go to state 28


state 46

    (9) Cond -> Exp = = Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 9 (Cond -> Exp = = Exp .)
    +               shift and go to state 28


state 47

    (12) Cond -> Exp ! = Exp .
    (17) Exp -> Exp . + Term

    )               reduce using rule 12 (Cond -> Exp ! = Exp .)
    +               shift and go to state 28


state 48

    (5) Instrucao -> ? ( Conds ) { Instrucoes } .

    ?               reduce using rule 5 (Instrucao -> ? ( Conds ) { Instrucoes } .)
    id              reduce using rule 5 (Instrucao -> ? ( Conds ) { Instrucoes } .)
    $               reduce using rule 5 (Instrucao -> ? ( Conds ) { Instrucoes } .)
    $end            reduce using rule 5 (Instrucao -> ? ( Conds ) { Instrucoes } .)
    }               reduce using rule 5 (Instrucao -> ? ( Conds ) { Instrucoes } .)

