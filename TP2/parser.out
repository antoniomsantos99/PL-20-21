Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Main
Rule 1     Main -> Instrucoes
Rule 2     Instrucoes -> Instrucoes Instrucao
Rule 3     Instrucoes -> Instrucao
Rule 4     Instrucao -> Atr
Rule 5     Instrucao -> repeat { Instrucoes } until ( Conditions )
Rule 6     Instrucao -> if ( Conditions ) { Instrucoes }
Rule 7     Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes }
Rule 8     Conditions -> Cond
Rule 9     Conditions -> Conditions or Cond
Rule 10    Condition -> Exp < Exp
Rule 11    Condition -> Exp > Exp
Rule 12    Condition -> Exp = = Exp
Rule 13    Condition -> Exp < = Exp
Rule 14    Condition -> Exp > = Exp
Rule 15    Condition -> Exp ! = Exp
Rule 16    Cond -> Cond and Cond2
Rule 17    Cond -> Cond2
Rule 18    Cond2 -> ! Cond
Rule 19    Cond2 -> Condition
Rule 20    Cond2 -> ( Conditions )
Rule 21    Atr -> id = Exp
Rule 22    Atr -> array ( id , int )
Rule 23    Atr -> id [ int ] = Exp
Rule 24    Atr -> id [ id ] = Exp
Rule 25    Atr -> $ string
Rule 26    Atr -> $ int
Rule 27    Atr -> $
Rule 28    Exp -> Exp + Term
Rule 29    Term -> Term - Factor
Rule 30    Exp -> Term
Rule 31    Term -> Term * Factor
Rule 32    Term -> Term / Factor
Rule 33    Term -> Factor
Rule 34    Factor -> id
Rule 35    Factor -> int
Rule 36    Factor -> float
Rule 37    Factor -> string

Terminals, with rules where they appear

!                    : 15 18
$                    : 25 26 27
(                    : 5 6 7 20 22
)                    : 5 6 7 20 22
*                    : 31
+                    : 28
,                    : 22
-                    : 29
/                    : 32
<                    : 10 13
=                    : 12 12 13 14 15 21 23 24
>                    : 11 14
[                    : 23 24
]                    : 23 24
and                  : 16
array                : 22
else                 : 7
error                : 
float                : 36
id                   : 21 22 23 24 24 34
if                   : 6 7
int                  : 22 23 26 35
or                   : 9
repeat               : 5
string               : 25 37
until                : 5
{                    : 5 6 7 7
}                    : 5 6 7 7

Nonterminals, with rules where they appear

Atr                  : 4
Cond                 : 8 9 16 18
Cond2                : 16 17
Condition            : 19
Conditions           : 5 6 7 9 20
Exp                  : 10 10 11 11 12 12 13 13 14 14 15 15 21 23 24 28
Factor               : 29 31 32 33
Instrucao            : 2 3
Instrucoes           : 1 2 5 6 7 7
Main                 : 0
Term                 : 28 29 30 31 32

Parsing method: LALR

state 0

    (0) S' -> . Main
    (1) Main -> . Instrucoes
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Main                           shift and go to state 1
    Instrucoes                     shift and go to state 2
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 1

    (0) S' -> Main .



state 2

    (1) Main -> Instrucoes .
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    $end            reduce using rule 1 (Main -> Instrucoes .)
    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucao                      shift and go to state 10
    Atr                            shift and go to state 4

state 3

    (3) Instrucoes -> Instrucao .

    repeat          reduce using rule 3 (Instrucoes -> Instrucao .)
    if              reduce using rule 3 (Instrucoes -> Instrucao .)
    id              reduce using rule 3 (Instrucoes -> Instrucao .)
    array           reduce using rule 3 (Instrucoes -> Instrucao .)
    $               reduce using rule 3 (Instrucoes -> Instrucao .)
    $end            reduce using rule 3 (Instrucoes -> Instrucao .)
    }               reduce using rule 3 (Instrucoes -> Instrucao .)


state 4

    (4) Instrucao -> Atr .

    repeat          reduce using rule 4 (Instrucao -> Atr .)
    if              reduce using rule 4 (Instrucao -> Atr .)
    id              reduce using rule 4 (Instrucao -> Atr .)
    array           reduce using rule 4 (Instrucao -> Atr .)
    $               reduce using rule 4 (Instrucao -> Atr .)
    $end            reduce using rule 4 (Instrucao -> Atr .)
    }               reduce using rule 4 (Instrucao -> Atr .)


state 5

    (5) Instrucao -> repeat . { Instrucoes } until ( Conditions )

    {               shift and go to state 11


state 6

    (6) Instrucao -> if . ( Conditions ) { Instrucoes }
    (7) Instrucao -> if . ( Conditions ) { Instrucoes } else { Instrucoes }

    (               shift and go to state 12


state 7

    (21) Atr -> id . = Exp
    (23) Atr -> id . [ int ] = Exp
    (24) Atr -> id . [ id ] = Exp

    =               shift and go to state 13
    [               shift and go to state 14


state 8

    (22) Atr -> array . ( id , int )

    (               shift and go to state 15


state 9

    (25) Atr -> $ . string
    (26) Atr -> $ . int
    (27) Atr -> $ .

    string          shift and go to state 16
    int             shift and go to state 17
    repeat          reduce using rule 27 (Atr -> $ .)
    if              reduce using rule 27 (Atr -> $ .)
    id              reduce using rule 27 (Atr -> $ .)
    array           reduce using rule 27 (Atr -> $ .)
    $               reduce using rule 27 (Atr -> $ .)
    $end            reduce using rule 27 (Atr -> $ .)
    }               reduce using rule 27 (Atr -> $ .)


state 10

    (2) Instrucoes -> Instrucoes Instrucao .

    repeat          reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    if              reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    id              reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    array           reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $end            reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    }               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)


state 11

    (5) Instrucao -> repeat { . Instrucoes } until ( Conditions )
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucoes                     shift and go to state 18
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 12

    (6) Instrucao -> if ( . Conditions ) { Instrucoes }
    (7) Instrucao -> if ( . Conditions ) { Instrucoes } else { Instrucoes }
    (8) Conditions -> . Cond
    (9) Conditions -> . Conditions or Cond
    (16) Cond -> . Cond and Cond2
    (17) Cond -> . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Conditions                     shift and go to state 20
    Cond                           shift and go to state 21
    Cond2                          shift and go to state 22
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 13

    (21) Atr -> id = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 32
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 14

    (23) Atr -> id [ . int ] = Exp
    (24) Atr -> id [ . id ] = Exp

    int             shift and go to state 34
    id              shift and go to state 33


state 15

    (22) Atr -> array ( . id , int )

    id              shift and go to state 35


state 16

    (25) Atr -> $ string .

    repeat          reduce using rule 25 (Atr -> $ string .)
    if              reduce using rule 25 (Atr -> $ string .)
    id              reduce using rule 25 (Atr -> $ string .)
    array           reduce using rule 25 (Atr -> $ string .)
    $               reduce using rule 25 (Atr -> $ string .)
    $end            reduce using rule 25 (Atr -> $ string .)
    }               reduce using rule 25 (Atr -> $ string .)


state 17

    (26) Atr -> $ int .

    repeat          reduce using rule 26 (Atr -> $ int .)
    if              reduce using rule 26 (Atr -> $ int .)
    id              reduce using rule 26 (Atr -> $ int .)
    array           reduce using rule 26 (Atr -> $ int .)
    $               reduce using rule 26 (Atr -> $ int .)
    $end            reduce using rule 26 (Atr -> $ int .)
    }               reduce using rule 26 (Atr -> $ int .)


state 18

    (5) Instrucao -> repeat { Instrucoes . } until ( Conditions )
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    }               shift and go to state 36
    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucao                      shift and go to state 10
    Atr                            shift and go to state 4

state 19

    (20) Cond2 -> ( . Conditions )
    (8) Conditions -> . Cond
    (9) Conditions -> . Conditions or Cond
    (16) Cond -> . Cond and Cond2
    (17) Cond -> . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Conditions                     shift and go to state 37
    Cond                           shift and go to state 21
    Cond2                          shift and go to state 22
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 20

    (6) Instrucao -> if ( Conditions . ) { Instrucoes }
    (7) Instrucao -> if ( Conditions . ) { Instrucoes } else { Instrucoes }
    (9) Conditions -> Conditions . or Cond

    )               shift and go to state 38
    or              shift and go to state 39


state 21

    (8) Conditions -> Cond .
    (16) Cond -> Cond . and Cond2

    )               reduce using rule 8 (Conditions -> Cond .)
    or              reduce using rule 8 (Conditions -> Cond .)
    and             shift and go to state 40


state 22

    (17) Cond -> Cond2 .

    and             reduce using rule 17 (Cond -> Cond2 .)
    )               reduce using rule 17 (Cond -> Cond2 .)
    or              reduce using rule 17 (Cond -> Cond2 .)


state 23

    (18) Cond2 -> ! . Cond
    (16) Cond -> . Cond and Cond2
    (17) Cond -> . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Cond                           shift and go to state 41
    Cond2                          shift and go to state 22
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 24

    (19) Cond2 -> Condition .

    and             reduce using rule 19 (Cond2 -> Condition .)
    )               reduce using rule 19 (Cond2 -> Condition .)
    or              reduce using rule 19 (Cond2 -> Condition .)


state 25

    (10) Condition -> Exp . < Exp
    (11) Condition -> Exp . > Exp
    (12) Condition -> Exp . = = Exp
    (13) Condition -> Exp . < = Exp
    (14) Condition -> Exp . > = Exp
    (15) Condition -> Exp . ! = Exp
    (28) Exp -> Exp . + Term

    <               shift and go to state 42
    >               shift and go to state 43
    =               shift and go to state 44
    !               shift and go to state 45
    +               shift and go to state 46


state 26

    (30) Exp -> Term .
    (29) Term -> Term . - Factor
    (31) Term -> Term . * Factor
    (32) Term -> Term . / Factor

    <               reduce using rule 30 (Exp -> Term .)
    >               reduce using rule 30 (Exp -> Term .)
    =               reduce using rule 30 (Exp -> Term .)
    !               reduce using rule 30 (Exp -> Term .)
    +               reduce using rule 30 (Exp -> Term .)
    repeat          reduce using rule 30 (Exp -> Term .)
    if              reduce using rule 30 (Exp -> Term .)
    id              reduce using rule 30 (Exp -> Term .)
    array           reduce using rule 30 (Exp -> Term .)
    $               reduce using rule 30 (Exp -> Term .)
    $end            reduce using rule 30 (Exp -> Term .)
    }               reduce using rule 30 (Exp -> Term .)
    and             reduce using rule 30 (Exp -> Term .)
    )               reduce using rule 30 (Exp -> Term .)
    or              reduce using rule 30 (Exp -> Term .)
    -               shift and go to state 47
    *               shift and go to state 48
    /               shift and go to state 49


state 27

    (33) Term -> Factor .

    -               reduce using rule 33 (Term -> Factor .)
    *               reduce using rule 33 (Term -> Factor .)
    /               reduce using rule 33 (Term -> Factor .)
    <               reduce using rule 33 (Term -> Factor .)
    >               reduce using rule 33 (Term -> Factor .)
    =               reduce using rule 33 (Term -> Factor .)
    !               reduce using rule 33 (Term -> Factor .)
    +               reduce using rule 33 (Term -> Factor .)
    repeat          reduce using rule 33 (Term -> Factor .)
    if              reduce using rule 33 (Term -> Factor .)
    id              reduce using rule 33 (Term -> Factor .)
    array           reduce using rule 33 (Term -> Factor .)
    $               reduce using rule 33 (Term -> Factor .)
    $end            reduce using rule 33 (Term -> Factor .)
    }               reduce using rule 33 (Term -> Factor .)
    and             reduce using rule 33 (Term -> Factor .)
    )               reduce using rule 33 (Term -> Factor .)
    or              reduce using rule 33 (Term -> Factor .)


state 28

    (34) Factor -> id .

    -               reduce using rule 34 (Factor -> id .)
    *               reduce using rule 34 (Factor -> id .)
    /               reduce using rule 34 (Factor -> id .)
    <               reduce using rule 34 (Factor -> id .)
    >               reduce using rule 34 (Factor -> id .)
    =               reduce using rule 34 (Factor -> id .)
    !               reduce using rule 34 (Factor -> id .)
    +               reduce using rule 34 (Factor -> id .)
    repeat          reduce using rule 34 (Factor -> id .)
    if              reduce using rule 34 (Factor -> id .)
    id              reduce using rule 34 (Factor -> id .)
    array           reduce using rule 34 (Factor -> id .)
    $               reduce using rule 34 (Factor -> id .)
    $end            reduce using rule 34 (Factor -> id .)
    }               reduce using rule 34 (Factor -> id .)
    and             reduce using rule 34 (Factor -> id .)
    )               reduce using rule 34 (Factor -> id .)
    or              reduce using rule 34 (Factor -> id .)


state 29

    (35) Factor -> int .

    -               reduce using rule 35 (Factor -> int .)
    *               reduce using rule 35 (Factor -> int .)
    /               reduce using rule 35 (Factor -> int .)
    <               reduce using rule 35 (Factor -> int .)
    >               reduce using rule 35 (Factor -> int .)
    =               reduce using rule 35 (Factor -> int .)
    !               reduce using rule 35 (Factor -> int .)
    +               reduce using rule 35 (Factor -> int .)
    repeat          reduce using rule 35 (Factor -> int .)
    if              reduce using rule 35 (Factor -> int .)
    id              reduce using rule 35 (Factor -> int .)
    array           reduce using rule 35 (Factor -> int .)
    $               reduce using rule 35 (Factor -> int .)
    $end            reduce using rule 35 (Factor -> int .)
    }               reduce using rule 35 (Factor -> int .)
    and             reduce using rule 35 (Factor -> int .)
    )               reduce using rule 35 (Factor -> int .)
    or              reduce using rule 35 (Factor -> int .)


state 30

    (36) Factor -> float .

    -               reduce using rule 36 (Factor -> float .)
    *               reduce using rule 36 (Factor -> float .)
    /               reduce using rule 36 (Factor -> float .)
    <               reduce using rule 36 (Factor -> float .)
    >               reduce using rule 36 (Factor -> float .)
    =               reduce using rule 36 (Factor -> float .)
    !               reduce using rule 36 (Factor -> float .)
    +               reduce using rule 36 (Factor -> float .)
    repeat          reduce using rule 36 (Factor -> float .)
    if              reduce using rule 36 (Factor -> float .)
    id              reduce using rule 36 (Factor -> float .)
    array           reduce using rule 36 (Factor -> float .)
    $               reduce using rule 36 (Factor -> float .)
    $end            reduce using rule 36 (Factor -> float .)
    }               reduce using rule 36 (Factor -> float .)
    and             reduce using rule 36 (Factor -> float .)
    )               reduce using rule 36 (Factor -> float .)
    or              reduce using rule 36 (Factor -> float .)


state 31

    (37) Factor -> string .

    -               reduce using rule 37 (Factor -> string .)
    *               reduce using rule 37 (Factor -> string .)
    /               reduce using rule 37 (Factor -> string .)
    <               reduce using rule 37 (Factor -> string .)
    >               reduce using rule 37 (Factor -> string .)
    =               reduce using rule 37 (Factor -> string .)
    !               reduce using rule 37 (Factor -> string .)
    +               reduce using rule 37 (Factor -> string .)
    repeat          reduce using rule 37 (Factor -> string .)
    if              reduce using rule 37 (Factor -> string .)
    id              reduce using rule 37 (Factor -> string .)
    array           reduce using rule 37 (Factor -> string .)
    $               reduce using rule 37 (Factor -> string .)
    $end            reduce using rule 37 (Factor -> string .)
    }               reduce using rule 37 (Factor -> string .)
    and             reduce using rule 37 (Factor -> string .)
    )               reduce using rule 37 (Factor -> string .)
    or              reduce using rule 37 (Factor -> string .)


state 32

    (21) Atr -> id = Exp .
    (28) Exp -> Exp . + Term

    repeat          reduce using rule 21 (Atr -> id = Exp .)
    if              reduce using rule 21 (Atr -> id = Exp .)
    id              reduce using rule 21 (Atr -> id = Exp .)
    array           reduce using rule 21 (Atr -> id = Exp .)
    $               reduce using rule 21 (Atr -> id = Exp .)
    $end            reduce using rule 21 (Atr -> id = Exp .)
    }               reduce using rule 21 (Atr -> id = Exp .)
    +               shift and go to state 46


state 33

    (24) Atr -> id [ id . ] = Exp

    ]               shift and go to state 50


state 34

    (23) Atr -> id [ int . ] = Exp

    ]               shift and go to state 51


state 35

    (22) Atr -> array ( id . , int )

    ,               shift and go to state 52


state 36

    (5) Instrucao -> repeat { Instrucoes } . until ( Conditions )

    until           shift and go to state 53


state 37

    (20) Cond2 -> ( Conditions . )
    (9) Conditions -> Conditions . or Cond

    )               shift and go to state 54
    or              shift and go to state 39


state 38

    (6) Instrucao -> if ( Conditions ) . { Instrucoes }
    (7) Instrucao -> if ( Conditions ) . { Instrucoes } else { Instrucoes }

    {               shift and go to state 55


state 39

    (9) Conditions -> Conditions or . Cond
    (16) Cond -> . Cond and Cond2
    (17) Cond -> . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Cond                           shift and go to state 56
    Cond2                          shift and go to state 22
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 40

    (16) Cond -> Cond and . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Cond2                          shift and go to state 57
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 41

    (18) Cond2 -> ! Cond .
    (16) Cond -> Cond . and Cond2

  ! shift/reduce conflict for and resolved as shift
    )               reduce using rule 18 (Cond2 -> ! Cond .)
    or              reduce using rule 18 (Cond2 -> ! Cond .)
    and             shift and go to state 40

  ! and             [ reduce using rule 18 (Cond2 -> ! Cond .) ]


state 42

    (10) Condition -> Exp < . Exp
    (13) Condition -> Exp < . = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    =               shift and go to state 59
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 58
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 43

    (11) Condition -> Exp > . Exp
    (14) Condition -> Exp > . = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    =               shift and go to state 61
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 60
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 44

    (12) Condition -> Exp = . = Exp

    =               shift and go to state 62


state 45

    (15) Condition -> Exp ! . = Exp

    =               shift and go to state 63


state 46

    (28) Exp -> Exp + . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Term                           shift and go to state 64
    Factor                         shift and go to state 27

state 47

    (29) Term -> Term - . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Factor                         shift and go to state 65

state 48

    (31) Term -> Term * . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Factor                         shift and go to state 66

state 49

    (32) Term -> Term / . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Factor                         shift and go to state 67

state 50

    (24) Atr -> id [ id ] . = Exp

    =               shift and go to state 68


state 51

    (23) Atr -> id [ int ] . = Exp

    =               shift and go to state 69


state 52

    (22) Atr -> array ( id , . int )

    int             shift and go to state 70


state 53

    (5) Instrucao -> repeat { Instrucoes } until . ( Conditions )

    (               shift and go to state 71


state 54

    (20) Cond2 -> ( Conditions ) .

    and             reduce using rule 20 (Cond2 -> ( Conditions ) .)
    )               reduce using rule 20 (Cond2 -> ( Conditions ) .)
    or              reduce using rule 20 (Cond2 -> ( Conditions ) .)


state 55

    (6) Instrucao -> if ( Conditions ) { . Instrucoes }
    (7) Instrucao -> if ( Conditions ) { . Instrucoes } else { Instrucoes }
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucoes                     shift and go to state 72
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 56

    (9) Conditions -> Conditions or Cond .
    (16) Cond -> Cond . and Cond2

    )               reduce using rule 9 (Conditions -> Conditions or Cond .)
    or              reduce using rule 9 (Conditions -> Conditions or Cond .)
    and             shift and go to state 40


state 57

    (16) Cond -> Cond and Cond2 .

    and             reduce using rule 16 (Cond -> Cond and Cond2 .)
    )               reduce using rule 16 (Cond -> Cond and Cond2 .)
    or              reduce using rule 16 (Cond -> Cond and Cond2 .)


state 58

    (10) Condition -> Exp < Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 10 (Condition -> Exp < Exp .)
    )               reduce using rule 10 (Condition -> Exp < Exp .)
    or              reduce using rule 10 (Condition -> Exp < Exp .)
    +               shift and go to state 46


state 59

    (13) Condition -> Exp < = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 73
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 60

    (11) Condition -> Exp > Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 11 (Condition -> Exp > Exp .)
    )               reduce using rule 11 (Condition -> Exp > Exp .)
    or              reduce using rule 11 (Condition -> Exp > Exp .)
    +               shift and go to state 46


state 61

    (14) Condition -> Exp > = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 74
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 62

    (12) Condition -> Exp = = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 75
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 63

    (15) Condition -> Exp ! = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 76
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 64

    (28) Exp -> Exp + Term .
    (29) Term -> Term . - Factor
    (31) Term -> Term . * Factor
    (32) Term -> Term . / Factor

    <               reduce using rule 28 (Exp -> Exp + Term .)
    >               reduce using rule 28 (Exp -> Exp + Term .)
    =               reduce using rule 28 (Exp -> Exp + Term .)
    !               reduce using rule 28 (Exp -> Exp + Term .)
    +               reduce using rule 28 (Exp -> Exp + Term .)
    repeat          reduce using rule 28 (Exp -> Exp + Term .)
    if              reduce using rule 28 (Exp -> Exp + Term .)
    id              reduce using rule 28 (Exp -> Exp + Term .)
    array           reduce using rule 28 (Exp -> Exp + Term .)
    $               reduce using rule 28 (Exp -> Exp + Term .)
    $end            reduce using rule 28 (Exp -> Exp + Term .)
    }               reduce using rule 28 (Exp -> Exp + Term .)
    and             reduce using rule 28 (Exp -> Exp + Term .)
    )               reduce using rule 28 (Exp -> Exp + Term .)
    or              reduce using rule 28 (Exp -> Exp + Term .)
    -               shift and go to state 47
    *               shift and go to state 48
    /               shift and go to state 49


state 65

    (29) Term -> Term - Factor .

    -               reduce using rule 29 (Term -> Term - Factor .)
    *               reduce using rule 29 (Term -> Term - Factor .)
    /               reduce using rule 29 (Term -> Term - Factor .)
    <               reduce using rule 29 (Term -> Term - Factor .)
    >               reduce using rule 29 (Term -> Term - Factor .)
    =               reduce using rule 29 (Term -> Term - Factor .)
    !               reduce using rule 29 (Term -> Term - Factor .)
    +               reduce using rule 29 (Term -> Term - Factor .)
    repeat          reduce using rule 29 (Term -> Term - Factor .)
    if              reduce using rule 29 (Term -> Term - Factor .)
    id              reduce using rule 29 (Term -> Term - Factor .)
    array           reduce using rule 29 (Term -> Term - Factor .)
    $               reduce using rule 29 (Term -> Term - Factor .)
    $end            reduce using rule 29 (Term -> Term - Factor .)
    }               reduce using rule 29 (Term -> Term - Factor .)
    and             reduce using rule 29 (Term -> Term - Factor .)
    )               reduce using rule 29 (Term -> Term - Factor .)
    or              reduce using rule 29 (Term -> Term - Factor .)


state 66

    (31) Term -> Term * Factor .

    -               reduce using rule 31 (Term -> Term * Factor .)
    *               reduce using rule 31 (Term -> Term * Factor .)
    /               reduce using rule 31 (Term -> Term * Factor .)
    <               reduce using rule 31 (Term -> Term * Factor .)
    >               reduce using rule 31 (Term -> Term * Factor .)
    =               reduce using rule 31 (Term -> Term * Factor .)
    !               reduce using rule 31 (Term -> Term * Factor .)
    +               reduce using rule 31 (Term -> Term * Factor .)
    repeat          reduce using rule 31 (Term -> Term * Factor .)
    if              reduce using rule 31 (Term -> Term * Factor .)
    id              reduce using rule 31 (Term -> Term * Factor .)
    array           reduce using rule 31 (Term -> Term * Factor .)
    $               reduce using rule 31 (Term -> Term * Factor .)
    $end            reduce using rule 31 (Term -> Term * Factor .)
    }               reduce using rule 31 (Term -> Term * Factor .)
    and             reduce using rule 31 (Term -> Term * Factor .)
    )               reduce using rule 31 (Term -> Term * Factor .)
    or              reduce using rule 31 (Term -> Term * Factor .)


state 67

    (32) Term -> Term / Factor .

    -               reduce using rule 32 (Term -> Term / Factor .)
    *               reduce using rule 32 (Term -> Term / Factor .)
    /               reduce using rule 32 (Term -> Term / Factor .)
    <               reduce using rule 32 (Term -> Term / Factor .)
    >               reduce using rule 32 (Term -> Term / Factor .)
    =               reduce using rule 32 (Term -> Term / Factor .)
    !               reduce using rule 32 (Term -> Term / Factor .)
    +               reduce using rule 32 (Term -> Term / Factor .)
    repeat          reduce using rule 32 (Term -> Term / Factor .)
    if              reduce using rule 32 (Term -> Term / Factor .)
    id              reduce using rule 32 (Term -> Term / Factor .)
    array           reduce using rule 32 (Term -> Term / Factor .)
    $               reduce using rule 32 (Term -> Term / Factor .)
    $end            reduce using rule 32 (Term -> Term / Factor .)
    }               reduce using rule 32 (Term -> Term / Factor .)
    and             reduce using rule 32 (Term -> Term / Factor .)
    )               reduce using rule 32 (Term -> Term / Factor .)
    or              reduce using rule 32 (Term -> Term / Factor .)


state 68

    (24) Atr -> id [ id ] = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 77
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 69

    (23) Atr -> id [ int ] = . Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Exp                            shift and go to state 78
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 70

    (22) Atr -> array ( id , int . )

    )               shift and go to state 79


state 71

    (5) Instrucao -> repeat { Instrucoes } until ( . Conditions )
    (8) Conditions -> . Cond
    (9) Conditions -> . Conditions or Cond
    (16) Cond -> . Cond and Cond2
    (17) Cond -> . Cond2
    (18) Cond2 -> . ! Cond
    (19) Cond2 -> . Condition
    (20) Cond2 -> . ( Conditions )
    (10) Condition -> . Exp < Exp
    (11) Condition -> . Exp > Exp
    (12) Condition -> . Exp = = Exp
    (13) Condition -> . Exp < = Exp
    (14) Condition -> . Exp > = Exp
    (15) Condition -> . Exp ! = Exp
    (28) Exp -> . Exp + Term
    (30) Exp -> . Term
    (29) Term -> . Term - Factor
    (31) Term -> . Term * Factor
    (32) Term -> . Term / Factor
    (33) Term -> . Factor
    (34) Factor -> . id
    (35) Factor -> . int
    (36) Factor -> . float
    (37) Factor -> . string

    !               shift and go to state 23
    (               shift and go to state 19
    id              shift and go to state 28
    int             shift and go to state 29
    float           shift and go to state 30
    string          shift and go to state 31

    Conditions                     shift and go to state 80
    Cond                           shift and go to state 21
    Cond2                          shift and go to state 22
    Condition                      shift and go to state 24
    Exp                            shift and go to state 25
    Term                           shift and go to state 26
    Factor                         shift and go to state 27

state 72

    (6) Instrucao -> if ( Conditions ) { Instrucoes . }
    (7) Instrucao -> if ( Conditions ) { Instrucoes . } else { Instrucoes }
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    }               shift and go to state 81
    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucao                      shift and go to state 10
    Atr                            shift and go to state 4

state 73

    (13) Condition -> Exp < = Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 13 (Condition -> Exp < = Exp .)
    )               reduce using rule 13 (Condition -> Exp < = Exp .)
    or              reduce using rule 13 (Condition -> Exp < = Exp .)
    +               shift and go to state 46


state 74

    (14) Condition -> Exp > = Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 14 (Condition -> Exp > = Exp .)
    )               reduce using rule 14 (Condition -> Exp > = Exp .)
    or              reduce using rule 14 (Condition -> Exp > = Exp .)
    +               shift and go to state 46


state 75

    (12) Condition -> Exp = = Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 12 (Condition -> Exp = = Exp .)
    )               reduce using rule 12 (Condition -> Exp = = Exp .)
    or              reduce using rule 12 (Condition -> Exp = = Exp .)
    +               shift and go to state 46


state 76

    (15) Condition -> Exp ! = Exp .
    (28) Exp -> Exp . + Term

    and             reduce using rule 15 (Condition -> Exp ! = Exp .)
    )               reduce using rule 15 (Condition -> Exp ! = Exp .)
    or              reduce using rule 15 (Condition -> Exp ! = Exp .)
    +               shift and go to state 46


state 77

    (24) Atr -> id [ id ] = Exp .
    (28) Exp -> Exp . + Term

    repeat          reduce using rule 24 (Atr -> id [ id ] = Exp .)
    if              reduce using rule 24 (Atr -> id [ id ] = Exp .)
    id              reduce using rule 24 (Atr -> id [ id ] = Exp .)
    array           reduce using rule 24 (Atr -> id [ id ] = Exp .)
    $               reduce using rule 24 (Atr -> id [ id ] = Exp .)
    $end            reduce using rule 24 (Atr -> id [ id ] = Exp .)
    }               reduce using rule 24 (Atr -> id [ id ] = Exp .)
    +               shift and go to state 46


state 78

    (23) Atr -> id [ int ] = Exp .
    (28) Exp -> Exp . + Term

    repeat          reduce using rule 23 (Atr -> id [ int ] = Exp .)
    if              reduce using rule 23 (Atr -> id [ int ] = Exp .)
    id              reduce using rule 23 (Atr -> id [ int ] = Exp .)
    array           reduce using rule 23 (Atr -> id [ int ] = Exp .)
    $               reduce using rule 23 (Atr -> id [ int ] = Exp .)
    $end            reduce using rule 23 (Atr -> id [ int ] = Exp .)
    }               reduce using rule 23 (Atr -> id [ int ] = Exp .)
    +               shift and go to state 46


state 79

    (22) Atr -> array ( id , int ) .

    repeat          reduce using rule 22 (Atr -> array ( id , int ) .)
    if              reduce using rule 22 (Atr -> array ( id , int ) .)
    id              reduce using rule 22 (Atr -> array ( id , int ) .)
    array           reduce using rule 22 (Atr -> array ( id , int ) .)
    $               reduce using rule 22 (Atr -> array ( id , int ) .)
    $end            reduce using rule 22 (Atr -> array ( id , int ) .)
    }               reduce using rule 22 (Atr -> array ( id , int ) .)


state 80

    (5) Instrucao -> repeat { Instrucoes } until ( Conditions . )
    (9) Conditions -> Conditions . or Cond

    )               shift and go to state 82
    or              shift and go to state 39


state 81

    (6) Instrucao -> if ( Conditions ) { Instrucoes } .
    (7) Instrucao -> if ( Conditions ) { Instrucoes } . else { Instrucoes }

    repeat          reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    if              reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    id              reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    array           reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    $               reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    $end            reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    }               reduce using rule 6 (Instrucao -> if ( Conditions ) { Instrucoes } .)
    else            shift and go to state 83


state 82

    (5) Instrucao -> repeat { Instrucoes } until ( Conditions ) .

    repeat          reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    if              reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    id              reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    array           reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    $               reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    $end            reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)
    }               reduce using rule 5 (Instrucao -> repeat { Instrucoes } until ( Conditions ) .)


state 83

    (7) Instrucao -> if ( Conditions ) { Instrucoes } else . { Instrucoes }

    {               shift and go to state 84


state 84

    (7) Instrucao -> if ( Conditions ) { Instrucoes } else { . Instrucoes }
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucoes                     shift and go to state 85
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 85

    (7) Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes . }
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . repeat { Instrucoes } until ( Conditions )
    (6) Instrucao -> . if ( Conditions ) { Instrucoes }
    (7) Instrucao -> . if ( Conditions ) { Instrucoes } else { Instrucoes }
    (21) Atr -> . id = Exp
    (22) Atr -> . array ( id , int )
    (23) Atr -> . id [ int ] = Exp
    (24) Atr -> . id [ id ] = Exp
    (25) Atr -> . $ string
    (26) Atr -> . $ int
    (27) Atr -> . $

    }               shift and go to state 86
    repeat          shift and go to state 5
    if              shift and go to state 6
    id              shift and go to state 7
    array           shift and go to state 8
    $               shift and go to state 9

    Instrucao                      shift and go to state 10
    Atr                            shift and go to state 4

state 86

    (7) Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .

    repeat          reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    if              reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    id              reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    array           reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    $               reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    $end            reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)
    }               reduce using rule 7 (Instrucao -> if ( Conditions ) { Instrucoes } else { Instrucoes } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 41 resolved as shift
