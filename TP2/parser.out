Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    or

Grammar

Rule 0     S' -> Main
Rule 1     Main -> Instrucoes
Rule 2     Instrucoes -> Instrucoes Instrucao
Rule 3     Instrucoes -> Instrucao
Rule 4     Instrucao -> Atr
Rule 5     Instrucao -> if ( Conds ) { Instrucoes }
Rule 6     Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes }
Rule 7     Conds -> Conds and Cond
Rule 8     Conds -> Cond
Rule 9     Cond -> Exp < Exp
Rule 10    Cond -> Exp > Exp
Rule 11    Cond -> Exp = = Exp
Rule 12    Cond -> Exp < = Exp
Rule 13    Cond -> Exp > = Exp
Rule 14    Cond -> Exp ! = Exp
Rule 15    Atr -> id = Exp
Rule 16    Atr -> array ( id , int )
Rule 17    Atr -> id [ int ] = Exp
Rule 18    Atr -> id [ id ] = Exp
Rule 19    Atr -> $ string
Rule 20    Atr -> $ int
Rule 21    Atr -> $
Rule 22    Exp -> Exp + Term
Rule 23    Term -> Term - Factor
Rule 24    Exp -> Term
Rule 25    Term -> Term * Factor
Rule 26    Term -> Term / Factor
Rule 27    Term -> Factor
Rule 28    Factor -> id
Rule 29    Factor -> int
Rule 30    Factor -> float
Rule 31    Factor -> string

Terminals, with rules where they appear

!                    : 14
$                    : 19 20 21
(                    : 5 6 16
)                    : 5 6 16
*                    : 25
+                    : 22
,                    : 16
-                    : 23
/                    : 26
<                    : 9 12
=                    : 11 11 12 13 14 15 17 18
>                    : 10 13
[                    : 17 18
]                    : 17 18
and                  : 7
array                : 16
else                 : 6
error                : 
float                : 30
id                   : 15 16 17 18 18 28
if                   : 5 6
int                  : 16 17 20 29
or                   : 
string               : 19 31
{                    : 5 6 6
}                    : 5 6 6

Nonterminals, with rules where they appear

Atr                  : 4
Cond                 : 7 8
Conds                : 5 6 7
Exp                  : 9 9 10 10 11 11 12 12 13 13 14 14 15 17 18 22
Factor               : 23 25 26 27
Instrucao            : 2 3
Instrucoes           : 1 2 5 6 6
Main                 : 0
Term                 : 22 23 24 25 26

Parsing method: LALR

state 0

    (0) S' -> . Main
    (1) Main -> . Instrucoes
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Main                           shift and go to state 1
    Instrucoes                     shift and go to state 2
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 1

    (0) S' -> Main .



state 2

    (1) Main -> Instrucoes .
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    $end            reduce using rule 1 (Main -> Instrucoes .)
    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Instrucao                      shift and go to state 9
    Atr                            shift and go to state 4

state 3

    (3) Instrucoes -> Instrucao .

    if              reduce using rule 3 (Instrucoes -> Instrucao .)
    id              reduce using rule 3 (Instrucoes -> Instrucao .)
    array           reduce using rule 3 (Instrucoes -> Instrucao .)
    $               reduce using rule 3 (Instrucoes -> Instrucao .)
    $end            reduce using rule 3 (Instrucoes -> Instrucao .)
    }               reduce using rule 3 (Instrucoes -> Instrucao .)


state 4

    (4) Instrucao -> Atr .

    if              reduce using rule 4 (Instrucao -> Atr .)
    id              reduce using rule 4 (Instrucao -> Atr .)
    array           reduce using rule 4 (Instrucao -> Atr .)
    $               reduce using rule 4 (Instrucao -> Atr .)
    $end            reduce using rule 4 (Instrucao -> Atr .)
    }               reduce using rule 4 (Instrucao -> Atr .)


state 5

    (5) Instrucao -> if . ( Conds ) { Instrucoes }
    (6) Instrucao -> if . ( Conds ) { Instrucoes } else { Instrucoes }

    (               shift and go to state 10


state 6

    (15) Atr -> id . = Exp
    (17) Atr -> id . [ int ] = Exp
    (18) Atr -> id . [ id ] = Exp

    =               shift and go to state 11
    [               shift and go to state 12


state 7

    (16) Atr -> array . ( id , int )

    (               shift and go to state 13


state 8

    (19) Atr -> $ . string
    (20) Atr -> $ . int
    (21) Atr -> $ .

    string          shift and go to state 14
    int             shift and go to state 15
    if              reduce using rule 21 (Atr -> $ .)
    id              reduce using rule 21 (Atr -> $ .)
    array           reduce using rule 21 (Atr -> $ .)
    $               reduce using rule 21 (Atr -> $ .)
    $end            reduce using rule 21 (Atr -> $ .)
    }               reduce using rule 21 (Atr -> $ .)


state 9

    (2) Instrucoes -> Instrucoes Instrucao .

    if              reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    id              reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    array           reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    $end            reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)
    }               reduce using rule 2 (Instrucoes -> Instrucoes Instrucao .)


state 10

    (5) Instrucao -> if ( . Conds ) { Instrucoes }
    (6) Instrucao -> if ( . Conds ) { Instrucoes } else { Instrucoes }
    (7) Conds -> . Conds and Cond
    (8) Conds -> . Cond
    (9) Cond -> . Exp < Exp
    (10) Cond -> . Exp > Exp
    (11) Cond -> . Exp = = Exp
    (12) Cond -> . Exp < = Exp
    (13) Cond -> . Exp > = Exp
    (14) Cond -> . Exp ! = Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Conds                          shift and go to state 16
    Cond                           shift and go to state 17
    Exp                            shift and go to state 18
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 11

    (15) Atr -> id = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 25
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 12

    (17) Atr -> id [ . int ] = Exp
    (18) Atr -> id [ . id ] = Exp

    int             shift and go to state 27
    id              shift and go to state 26


state 13

    (16) Atr -> array ( . id , int )

    id              shift and go to state 28


state 14

    (19) Atr -> $ string .

    if              reduce using rule 19 (Atr -> $ string .)
    id              reduce using rule 19 (Atr -> $ string .)
    array           reduce using rule 19 (Atr -> $ string .)
    $               reduce using rule 19 (Atr -> $ string .)
    $end            reduce using rule 19 (Atr -> $ string .)
    }               reduce using rule 19 (Atr -> $ string .)


state 15

    (20) Atr -> $ int .

    if              reduce using rule 20 (Atr -> $ int .)
    id              reduce using rule 20 (Atr -> $ int .)
    array           reduce using rule 20 (Atr -> $ int .)
    $               reduce using rule 20 (Atr -> $ int .)
    $end            reduce using rule 20 (Atr -> $ int .)
    }               reduce using rule 20 (Atr -> $ int .)


state 16

    (5) Instrucao -> if ( Conds . ) { Instrucoes }
    (6) Instrucao -> if ( Conds . ) { Instrucoes } else { Instrucoes }
    (7) Conds -> Conds . and Cond

    )               shift and go to state 29
    and             shift and go to state 30


state 17

    (8) Conds -> Cond .

    )               reduce using rule 8 (Conds -> Cond .)
    and             reduce using rule 8 (Conds -> Cond .)


state 18

    (9) Cond -> Exp . < Exp
    (10) Cond -> Exp . > Exp
    (11) Cond -> Exp . = = Exp
    (12) Cond -> Exp . < = Exp
    (13) Cond -> Exp . > = Exp
    (14) Cond -> Exp . ! = Exp
    (22) Exp -> Exp . + Term

    <               shift and go to state 31
    >               shift and go to state 32
    =               shift and go to state 33
    !               shift and go to state 34
    +               shift and go to state 35


state 19

    (24) Exp -> Term .
    (23) Term -> Term . - Factor
    (25) Term -> Term . * Factor
    (26) Term -> Term . / Factor

    <               reduce using rule 24 (Exp -> Term .)
    >               reduce using rule 24 (Exp -> Term .)
    =               reduce using rule 24 (Exp -> Term .)
    !               reduce using rule 24 (Exp -> Term .)
    +               reduce using rule 24 (Exp -> Term .)
    if              reduce using rule 24 (Exp -> Term .)
    id              reduce using rule 24 (Exp -> Term .)
    array           reduce using rule 24 (Exp -> Term .)
    $               reduce using rule 24 (Exp -> Term .)
    $end            reduce using rule 24 (Exp -> Term .)
    }               reduce using rule 24 (Exp -> Term .)
    )               reduce using rule 24 (Exp -> Term .)
    and             reduce using rule 24 (Exp -> Term .)
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38


state 20

    (27) Term -> Factor .

    -               reduce using rule 27 (Term -> Factor .)
    *               reduce using rule 27 (Term -> Factor .)
    /               reduce using rule 27 (Term -> Factor .)
    <               reduce using rule 27 (Term -> Factor .)
    >               reduce using rule 27 (Term -> Factor .)
    =               reduce using rule 27 (Term -> Factor .)
    !               reduce using rule 27 (Term -> Factor .)
    +               reduce using rule 27 (Term -> Factor .)
    if              reduce using rule 27 (Term -> Factor .)
    id              reduce using rule 27 (Term -> Factor .)
    array           reduce using rule 27 (Term -> Factor .)
    $               reduce using rule 27 (Term -> Factor .)
    $end            reduce using rule 27 (Term -> Factor .)
    }               reduce using rule 27 (Term -> Factor .)
    )               reduce using rule 27 (Term -> Factor .)
    and             reduce using rule 27 (Term -> Factor .)


state 21

    (28) Factor -> id .

    -               reduce using rule 28 (Factor -> id .)
    *               reduce using rule 28 (Factor -> id .)
    /               reduce using rule 28 (Factor -> id .)
    <               reduce using rule 28 (Factor -> id .)
    >               reduce using rule 28 (Factor -> id .)
    =               reduce using rule 28 (Factor -> id .)
    !               reduce using rule 28 (Factor -> id .)
    +               reduce using rule 28 (Factor -> id .)
    if              reduce using rule 28 (Factor -> id .)
    id              reduce using rule 28 (Factor -> id .)
    array           reduce using rule 28 (Factor -> id .)
    $               reduce using rule 28 (Factor -> id .)
    $end            reduce using rule 28 (Factor -> id .)
    }               reduce using rule 28 (Factor -> id .)
    )               reduce using rule 28 (Factor -> id .)
    and             reduce using rule 28 (Factor -> id .)


state 22

    (29) Factor -> int .

    -               reduce using rule 29 (Factor -> int .)
    *               reduce using rule 29 (Factor -> int .)
    /               reduce using rule 29 (Factor -> int .)
    <               reduce using rule 29 (Factor -> int .)
    >               reduce using rule 29 (Factor -> int .)
    =               reduce using rule 29 (Factor -> int .)
    !               reduce using rule 29 (Factor -> int .)
    +               reduce using rule 29 (Factor -> int .)
    if              reduce using rule 29 (Factor -> int .)
    id              reduce using rule 29 (Factor -> int .)
    array           reduce using rule 29 (Factor -> int .)
    $               reduce using rule 29 (Factor -> int .)
    $end            reduce using rule 29 (Factor -> int .)
    }               reduce using rule 29 (Factor -> int .)
    )               reduce using rule 29 (Factor -> int .)
    and             reduce using rule 29 (Factor -> int .)


state 23

    (30) Factor -> float .

    -               reduce using rule 30 (Factor -> float .)
    *               reduce using rule 30 (Factor -> float .)
    /               reduce using rule 30 (Factor -> float .)
    <               reduce using rule 30 (Factor -> float .)
    >               reduce using rule 30 (Factor -> float .)
    =               reduce using rule 30 (Factor -> float .)
    !               reduce using rule 30 (Factor -> float .)
    +               reduce using rule 30 (Factor -> float .)
    if              reduce using rule 30 (Factor -> float .)
    id              reduce using rule 30 (Factor -> float .)
    array           reduce using rule 30 (Factor -> float .)
    $               reduce using rule 30 (Factor -> float .)
    $end            reduce using rule 30 (Factor -> float .)
    }               reduce using rule 30 (Factor -> float .)
    )               reduce using rule 30 (Factor -> float .)
    and             reduce using rule 30 (Factor -> float .)


state 24

    (31) Factor -> string .

    -               reduce using rule 31 (Factor -> string .)
    *               reduce using rule 31 (Factor -> string .)
    /               reduce using rule 31 (Factor -> string .)
    <               reduce using rule 31 (Factor -> string .)
    >               reduce using rule 31 (Factor -> string .)
    =               reduce using rule 31 (Factor -> string .)
    !               reduce using rule 31 (Factor -> string .)
    +               reduce using rule 31 (Factor -> string .)
    if              reduce using rule 31 (Factor -> string .)
    id              reduce using rule 31 (Factor -> string .)
    array           reduce using rule 31 (Factor -> string .)
    $               reduce using rule 31 (Factor -> string .)
    $end            reduce using rule 31 (Factor -> string .)
    }               reduce using rule 31 (Factor -> string .)
    )               reduce using rule 31 (Factor -> string .)
    and             reduce using rule 31 (Factor -> string .)


state 25

    (15) Atr -> id = Exp .
    (22) Exp -> Exp . + Term

    if              reduce using rule 15 (Atr -> id = Exp .)
    id              reduce using rule 15 (Atr -> id = Exp .)
    array           reduce using rule 15 (Atr -> id = Exp .)
    $               reduce using rule 15 (Atr -> id = Exp .)
    $end            reduce using rule 15 (Atr -> id = Exp .)
    }               reduce using rule 15 (Atr -> id = Exp .)
    +               shift and go to state 35


state 26

    (18) Atr -> id [ id . ] = Exp

    ]               shift and go to state 39


state 27

    (17) Atr -> id [ int . ] = Exp

    ]               shift and go to state 40


state 28

    (16) Atr -> array ( id . , int )

    ,               shift and go to state 41


state 29

    (5) Instrucao -> if ( Conds ) . { Instrucoes }
    (6) Instrucao -> if ( Conds ) . { Instrucoes } else { Instrucoes }

    {               shift and go to state 42


state 30

    (7) Conds -> Conds and . Cond
    (9) Cond -> . Exp < Exp
    (10) Cond -> . Exp > Exp
    (11) Cond -> . Exp = = Exp
    (12) Cond -> . Exp < = Exp
    (13) Cond -> . Exp > = Exp
    (14) Cond -> . Exp ! = Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Cond                           shift and go to state 43
    Exp                            shift and go to state 18
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 31

    (9) Cond -> Exp < . Exp
    (12) Cond -> Exp < . = Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    =               shift and go to state 45
    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 44
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 32

    (10) Cond -> Exp > . Exp
    (13) Cond -> Exp > . = Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    =               shift and go to state 47
    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 46
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 33

    (11) Cond -> Exp = . = Exp

    =               shift and go to state 48


state 34

    (14) Cond -> Exp ! . = Exp

    =               shift and go to state 49


state 35

    (22) Exp -> Exp + . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Term                           shift and go to state 50
    Factor                         shift and go to state 20

state 36

    (23) Term -> Term - . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Factor                         shift and go to state 51

state 37

    (25) Term -> Term * . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Factor                         shift and go to state 52

state 38

    (26) Term -> Term / . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Factor                         shift and go to state 53

state 39

    (18) Atr -> id [ id ] . = Exp

    =               shift and go to state 54


state 40

    (17) Atr -> id [ int ] . = Exp

    =               shift and go to state 55


state 41

    (16) Atr -> array ( id , . int )

    int             shift and go to state 56


state 42

    (5) Instrucao -> if ( Conds ) { . Instrucoes }
    (6) Instrucao -> if ( Conds ) { . Instrucoes } else { Instrucoes }
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Instrucoes                     shift and go to state 57
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 43

    (7) Conds -> Conds and Cond .

    )               reduce using rule 7 (Conds -> Conds and Cond .)
    and             reduce using rule 7 (Conds -> Conds and Cond .)


state 44

    (9) Cond -> Exp < Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 9 (Cond -> Exp < Exp .)
    and             reduce using rule 9 (Cond -> Exp < Exp .)
    +               shift and go to state 35


state 45

    (12) Cond -> Exp < = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 58
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 46

    (10) Cond -> Exp > Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 10 (Cond -> Exp > Exp .)
    and             reduce using rule 10 (Cond -> Exp > Exp .)
    +               shift and go to state 35


state 47

    (13) Cond -> Exp > = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 59
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 48

    (11) Cond -> Exp = = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 60
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 49

    (14) Cond -> Exp ! = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 61
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 50

    (22) Exp -> Exp + Term .
    (23) Term -> Term . - Factor
    (25) Term -> Term . * Factor
    (26) Term -> Term . / Factor

    <               reduce using rule 22 (Exp -> Exp + Term .)
    >               reduce using rule 22 (Exp -> Exp + Term .)
    =               reduce using rule 22 (Exp -> Exp + Term .)
    !               reduce using rule 22 (Exp -> Exp + Term .)
    +               reduce using rule 22 (Exp -> Exp + Term .)
    if              reduce using rule 22 (Exp -> Exp + Term .)
    id              reduce using rule 22 (Exp -> Exp + Term .)
    array           reduce using rule 22 (Exp -> Exp + Term .)
    $               reduce using rule 22 (Exp -> Exp + Term .)
    $end            reduce using rule 22 (Exp -> Exp + Term .)
    }               reduce using rule 22 (Exp -> Exp + Term .)
    )               reduce using rule 22 (Exp -> Exp + Term .)
    and             reduce using rule 22 (Exp -> Exp + Term .)
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38


state 51

    (23) Term -> Term - Factor .

    -               reduce using rule 23 (Term -> Term - Factor .)
    *               reduce using rule 23 (Term -> Term - Factor .)
    /               reduce using rule 23 (Term -> Term - Factor .)
    <               reduce using rule 23 (Term -> Term - Factor .)
    >               reduce using rule 23 (Term -> Term - Factor .)
    =               reduce using rule 23 (Term -> Term - Factor .)
    !               reduce using rule 23 (Term -> Term - Factor .)
    +               reduce using rule 23 (Term -> Term - Factor .)
    if              reduce using rule 23 (Term -> Term - Factor .)
    id              reduce using rule 23 (Term -> Term - Factor .)
    array           reduce using rule 23 (Term -> Term - Factor .)
    $               reduce using rule 23 (Term -> Term - Factor .)
    $end            reduce using rule 23 (Term -> Term - Factor .)
    }               reduce using rule 23 (Term -> Term - Factor .)
    )               reduce using rule 23 (Term -> Term - Factor .)
    and             reduce using rule 23 (Term -> Term - Factor .)


state 52

    (25) Term -> Term * Factor .

    -               reduce using rule 25 (Term -> Term * Factor .)
    *               reduce using rule 25 (Term -> Term * Factor .)
    /               reduce using rule 25 (Term -> Term * Factor .)
    <               reduce using rule 25 (Term -> Term * Factor .)
    >               reduce using rule 25 (Term -> Term * Factor .)
    =               reduce using rule 25 (Term -> Term * Factor .)
    !               reduce using rule 25 (Term -> Term * Factor .)
    +               reduce using rule 25 (Term -> Term * Factor .)
    if              reduce using rule 25 (Term -> Term * Factor .)
    id              reduce using rule 25 (Term -> Term * Factor .)
    array           reduce using rule 25 (Term -> Term * Factor .)
    $               reduce using rule 25 (Term -> Term * Factor .)
    $end            reduce using rule 25 (Term -> Term * Factor .)
    }               reduce using rule 25 (Term -> Term * Factor .)
    )               reduce using rule 25 (Term -> Term * Factor .)
    and             reduce using rule 25 (Term -> Term * Factor .)


state 53

    (26) Term -> Term / Factor .

    -               reduce using rule 26 (Term -> Term / Factor .)
    *               reduce using rule 26 (Term -> Term / Factor .)
    /               reduce using rule 26 (Term -> Term / Factor .)
    <               reduce using rule 26 (Term -> Term / Factor .)
    >               reduce using rule 26 (Term -> Term / Factor .)
    =               reduce using rule 26 (Term -> Term / Factor .)
    !               reduce using rule 26 (Term -> Term / Factor .)
    +               reduce using rule 26 (Term -> Term / Factor .)
    if              reduce using rule 26 (Term -> Term / Factor .)
    id              reduce using rule 26 (Term -> Term / Factor .)
    array           reduce using rule 26 (Term -> Term / Factor .)
    $               reduce using rule 26 (Term -> Term / Factor .)
    $end            reduce using rule 26 (Term -> Term / Factor .)
    }               reduce using rule 26 (Term -> Term / Factor .)
    )               reduce using rule 26 (Term -> Term / Factor .)
    and             reduce using rule 26 (Term -> Term / Factor .)


state 54

    (18) Atr -> id [ id ] = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 62
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 55

    (17) Atr -> id [ int ] = . Exp
    (22) Exp -> . Exp + Term
    (24) Exp -> . Term
    (23) Term -> . Term - Factor
    (25) Term -> . Term * Factor
    (26) Term -> . Term / Factor
    (27) Term -> . Factor
    (28) Factor -> . id
    (29) Factor -> . int
    (30) Factor -> . float
    (31) Factor -> . string

    id              shift and go to state 21
    int             shift and go to state 22
    float           shift and go to state 23
    string          shift and go to state 24

    Exp                            shift and go to state 63
    Term                           shift and go to state 19
    Factor                         shift and go to state 20

state 56

    (16) Atr -> array ( id , int . )

    )               shift and go to state 64


state 57

    (5) Instrucao -> if ( Conds ) { Instrucoes . }
    (6) Instrucao -> if ( Conds ) { Instrucoes . } else { Instrucoes }
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    }               shift and go to state 65
    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Instrucao                      shift and go to state 9
    Atr                            shift and go to state 4

state 58

    (12) Cond -> Exp < = Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 12 (Cond -> Exp < = Exp .)
    and             reduce using rule 12 (Cond -> Exp < = Exp .)
    +               shift and go to state 35


state 59

    (13) Cond -> Exp > = Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 13 (Cond -> Exp > = Exp .)
    and             reduce using rule 13 (Cond -> Exp > = Exp .)
    +               shift and go to state 35


state 60

    (11) Cond -> Exp = = Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 11 (Cond -> Exp = = Exp .)
    and             reduce using rule 11 (Cond -> Exp = = Exp .)
    +               shift and go to state 35


state 61

    (14) Cond -> Exp ! = Exp .
    (22) Exp -> Exp . + Term

    )               reduce using rule 14 (Cond -> Exp ! = Exp .)
    and             reduce using rule 14 (Cond -> Exp ! = Exp .)
    +               shift and go to state 35


state 62

    (18) Atr -> id [ id ] = Exp .
    (22) Exp -> Exp . + Term

    if              reduce using rule 18 (Atr -> id [ id ] = Exp .)
    id              reduce using rule 18 (Atr -> id [ id ] = Exp .)
    array           reduce using rule 18 (Atr -> id [ id ] = Exp .)
    $               reduce using rule 18 (Atr -> id [ id ] = Exp .)
    $end            reduce using rule 18 (Atr -> id [ id ] = Exp .)
    }               reduce using rule 18 (Atr -> id [ id ] = Exp .)
    +               shift and go to state 35


state 63

    (17) Atr -> id [ int ] = Exp .
    (22) Exp -> Exp . + Term

    if              reduce using rule 17 (Atr -> id [ int ] = Exp .)
    id              reduce using rule 17 (Atr -> id [ int ] = Exp .)
    array           reduce using rule 17 (Atr -> id [ int ] = Exp .)
    $               reduce using rule 17 (Atr -> id [ int ] = Exp .)
    $end            reduce using rule 17 (Atr -> id [ int ] = Exp .)
    }               reduce using rule 17 (Atr -> id [ int ] = Exp .)
    +               shift and go to state 35


state 64

    (16) Atr -> array ( id , int ) .

    if              reduce using rule 16 (Atr -> array ( id , int ) .)
    id              reduce using rule 16 (Atr -> array ( id , int ) .)
    array           reduce using rule 16 (Atr -> array ( id , int ) .)
    $               reduce using rule 16 (Atr -> array ( id , int ) .)
    $end            reduce using rule 16 (Atr -> array ( id , int ) .)
    }               reduce using rule 16 (Atr -> array ( id , int ) .)


state 65

    (5) Instrucao -> if ( Conds ) { Instrucoes } .
    (6) Instrucao -> if ( Conds ) { Instrucoes } . else { Instrucoes }

    if              reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    id              reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    array           reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    $               reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    $end            reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    }               reduce using rule 5 (Instrucao -> if ( Conds ) { Instrucoes } .)
    else            shift and go to state 66


state 66

    (6) Instrucao -> if ( Conds ) { Instrucoes } else . { Instrucoes }

    {               shift and go to state 67


state 67

    (6) Instrucao -> if ( Conds ) { Instrucoes } else { . Instrucoes }
    (2) Instrucoes -> . Instrucoes Instrucao
    (3) Instrucoes -> . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Instrucoes                     shift and go to state 68
    Instrucao                      shift and go to state 3
    Atr                            shift and go to state 4

state 68

    (6) Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes . }
    (2) Instrucoes -> Instrucoes . Instrucao
    (4) Instrucao -> . Atr
    (5) Instrucao -> . if ( Conds ) { Instrucoes }
    (6) Instrucao -> . if ( Conds ) { Instrucoes } else { Instrucoes }
    (15) Atr -> . id = Exp
    (16) Atr -> . array ( id , int )
    (17) Atr -> . id [ int ] = Exp
    (18) Atr -> . id [ id ] = Exp
    (19) Atr -> . $ string
    (20) Atr -> . $ int
    (21) Atr -> . $

    }               shift and go to state 69
    if              shift and go to state 5
    id              shift and go to state 6
    array           shift and go to state 7
    $               shift and go to state 8

    Instrucao                      shift and go to state 9
    Atr                            shift and go to state 4

state 69

    (6) Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .

    if              reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)
    id              reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)
    array           reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)
    $               reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)
    $end            reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)
    }               reduce using rule 6 (Instrucao -> if ( Conds ) { Instrucoes } else { Instrucoes } .)

